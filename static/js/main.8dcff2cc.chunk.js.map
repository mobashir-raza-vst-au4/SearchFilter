{"version":3,"sources":["Redux/setData.js","Redux/setId.js","Redux/setInput.js","Redux/store.js","Components/Header.js","Components/Footer.js","Components/Card.js","Components/Body.js","App.js","serviceWorker.js","index.js"],"names":["initialState","data","appReducerFunction","state","action","stateCopy","JSON","parse","stringify","type","payload","id","input","rootReducers","combineReducers","setData","setId","setInput","createStore","connect","store","dispatch","handleInput","e","target","value","props","className","onChange","placeholder","aria-label","Component","handleId","class","onClick","key","Card","style","width","src","this","alt","firstName","lastName","email","componentDidMount","a","axios","get","response","console","log","componentDidUpdate","prevProps","prevState","then","filter","first_name","toLowerCase","last_name","includes","map","avatar","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.8dcff2cc.chunk.js","sourcesContent":["let initialState = {\r\n    data: \"\"\r\n}\r\n\r\nfunction appReducerFunction(state=initialState, action){\r\n    let stateCopy = JSON.parse(JSON.stringify(state));\r\n    // eslint-disable-next-line default-case\r\n    switch(action.type){\r\n        case \"set_data\":\r\n            stateCopy.data = action.payload;\r\n            return stateCopy;\r\n    }\r\n    return state;\r\n\r\n}\r\n\r\nexport default appReducerFunction;","let initialState = {\r\n    id: 1\r\n}\r\n\r\nfunction appReducerFunction(state=initialState, action){\r\n    let stateCopy = JSON.parse(JSON.stringify(state));\r\n    // eslint-disable-next-line default-case\r\n    switch(action.type){\r\n        case \"set_id\":\r\n            stateCopy.id = action.payload;\r\n            return stateCopy;\r\n    }\r\n    return state;\r\n\r\n}\r\n\r\nexport default appReducerFunction;","let initialState = {\r\n    input: \"\"\r\n}\r\n\r\nfunction appReducerFunction(state=initialState, action){\r\n    let stateCopy = JSON.parse(JSON.stringify(state));\r\n    // eslint-disable-next-line default-case\r\n    switch(action.type){\r\n        case \"set_input\":\r\n            stateCopy.input = action.payload;\r\n            return stateCopy;\r\n    }\r\n    return state;\r\n\r\n}\r\n\r\nexport default appReducerFunction;","import {combineReducers, createStore} from 'redux';\r\nimport setData from './setData';\r\nimport setId from './setId';\r\nimport setInput from './setInput';\r\n\r\nconst rootReducers = combineReducers({\r\n    setData: setData,\r\n    setId: setId,\r\n    setInput: setInput\r\n});\r\n\r\nexport default createStore(rootReducers);","import React, { Component } from 'react';\r\nimport {connect} from 'react-redux';\r\n\r\nlet getData = (store) => {\r\n    // console.log(store)\r\n    return {\r\n        store\r\n    }\r\n}\r\n\r\nlet getFunction = (dispatch) => {\r\n    return {\r\n        setInput: dispatch\r\n    }\r\n}\r\n\r\n\r\nexport default connect(getData, getFunction)(class Header extends Component {\r\n    \r\n    handleInput = (e) => {\r\n        // console.log(e.target.value)\r\n        const value = e.target.value\r\n        let action = {\r\n            type: \"set_input\",\r\n            payload: value\r\n        }\r\n        this.props.setInput(action)\r\n        \r\n    }\r\n    \r\n    render() {\r\n        return (\r\n            <div>\r\n                <nav className=\"navbar navbar-dark bg-dark fixed-top\">\r\n                        \r\n                        <div className=\"container-fluid\">\r\n                        <div className = \"row \">\r\n                        <div className = \"col-md-4\">\r\n                        <h1 className=\"navbar-brand\" >Gongo</h1>\r\n                        </div>\r\n                        <form className=\"col-lg-4 d-flex justify-content-center \">\r\n                        <input onChange={(e) => {this.handleInput(e)}} className=\"form-control mx-5\" type=\"search\" placeholder=\"Search\" aria-label=\"Search\" />\r\n                        </form>     \r\n                        </div>\r\n                        </div>\r\n                        </nav>\r\n            </div>\r\n        )\r\n    }\r\n})\r\n\r\n\r\n\r\n\r\n\r\n","import React, { Component } from 'react';\r\nimport {connect} from 'react-redux';\r\n\r\nlet getData = (store) => {\r\n    // console.log(store)\r\n    return {\r\n        store\r\n    }\r\n}\r\n\r\nlet getFunction = (dispatch) => {\r\n    return {\r\n        setId: dispatch\r\n    }\r\n}\r\n\r\nexport default connect(getData, getFunction)(class Footer extends Component {\r\n\r\n    handleId = (id) => {\r\n        let action = {\r\n            type: \"set_id\",\r\n            payload: id\r\n        }\r\n        this.props.setId(action)\r\n    }\r\n    \r\n    render() {\r\n        return (\r\n            <div className=\"pt-5\">\r\n                <nav aria-label=\"Page navigation example\">\r\n                <ul class=\"pagination justify-content-center\">\r\n                    <li onClick={() => {this.handleId(1)}} key=\"1\" class=\"page-item\"><span class=\"page-link\">1</span></li>\r\n                    <li onClick={() => {this.handleId(2)}} key=\"2\" class=\"page-item\"><span class=\"page-link\">2</span></li>\r\n                </ul>\r\n                </nav>\r\n            </div>\r\n        )\r\n    }\r\n})\r\n","import React, { Component } from 'react'\r\n\r\nexport default class Card extends Component {\r\n    render() {\r\n        return (\r\n            <div style={{width: \"18rem\"}} className=\"pt-5\">\r\n                <div className=\"card\">\r\n                    <img src={this.props.src} className=\"card-img-top\" alt=\"...\" />\r\n                    <div className=\"card-body\">\r\n                        <h5 className=\"card-title\">{this.props.firstName} {this.props.lastName}</h5>\r\n                        <p className=\"card-text\">{this.props.email}</p>     \r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react';\r\nimport axios from 'axios'\r\nimport {connect} from 'react-redux';\r\nimport Footer from './Footer';\r\nimport Card from './Card'\r\n\r\nlet getData = (store) => {\r\n    // console.log(store.setData.data)\r\n    return {\r\n        data: store.setData.data,\r\n        id: store.setId.id,\r\n        input: store.setInput.input\r\n    }\r\n}\r\n\r\nlet getFunction = (dispatch) => {\r\n    return {\r\n        setData: dispatch\r\n    }\r\n}\r\n\r\nexport default connect(getData, getFunction)(class Body extends Component {\r\n    componentDidMount = async () => {\r\n        // console.log(\"did mo\")\r\n        try {\r\n            const response = await axios.get(`https://reqres.in/api/users?page=${this.props.id}`)\r\n            // console.log(response);\r\n            // console.log(response.data.data)\r\n            let action = {\r\n                type: \"set_data\",\r\n                payload: response.data.data\r\n            }\r\n            this.props.setData(action)\r\n        } catch (error) {\r\n            console.log(error)\r\n        }  \r\n        \r\n    }\r\n\r\n\r\n    componentDidUpdate = async(prevProps, prevState) => {\r\n        // console.log(\"cDU\", prevProps, this.props.id);\r\n        // console.log(\"prev state\",prevState)\r\n            if(this.props.id === prevProps.id){\r\n                return false;  \r\n\r\n            }else{\r\n                try {\r\n                    await axios.get(`https://reqres.in/api/users?page=${this.props.id}`)\r\n                    .then(response => {\r\n                        // console.log(response.data.data)\r\n                        let action = {\r\n                            type: \"set_data\",\r\n                            payload: response.data.data\r\n                        }\r\n                        this.props.setData(action);\r\n                        \r\n                    })\r\n                }catch (error) {\r\n                    console.log(error)\r\n                }\r\n            }\r\n    }\r\n    \r\n     render() {\r\n        // console.log(this.props)\r\n        return (\r\n            <div className=\"container pt-5\">\r\n                <div className=\"row justify-content-center\">\r\n                {this.props.data && this.props.data.filter(data => {\r\n                    if(this.props.input === null){\r\n                        return data;\r\n                    }else if(`${data.first_name.toLowerCase()} ${data.last_name.toLowerCase()}`.includes(this.props.input.toLowerCase()) || data.last_name.toLowerCase().includes(this.props.input.toLowerCase())){\r\n                        return data;\r\n                    }\r\n                })\r\n                .map((data) => {\r\n                    return(\r\n                        <Card src={data.avatar} firstName={data.first_name} lastName={data.last_name} email={data.email}/>\r\n                    )\r\n                })}\r\n                </div>\r\n                \r\n                <Footer/>\r\n            </div>\r\n        )\r\n    }\r\n})\r\n","import './App.css';\nimport Header from './Components/Header';\nimport Body from './Components/Body';\nimport React, { Component } from 'react';\n\nexport default class App extends Component {\n  render() {\n    return (\n      <div>\n        <Header/>\n        <Body/>\n      </div>\n    )\n  }\n}\n\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport {Provider} from 'react-redux';\nimport store from './Redux/store';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n    <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}